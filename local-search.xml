<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>RL-1</title>
    <link href="/2024/08/16/RL-1/"/>
    <url>/2024/08/16/RL-1/</url>
    
    <content type="html"><![CDATA[<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1 简介"></a>1 简介</h1><p>我们在第 1 章中了解到，强化学习关注智能体和环境交互过程中的学习，这是一种<strong>试错型学习</strong>（trial-and-error learning）范式。在正式学习强化学习之前，我们需要先了解多臂老虎机问题，它可以被看作简化版的强化学习问题。与强化学习不同，多臂老虎机不存在状态信息，只有动作和奖励，算是最简单的“和环境交互中的学习”的一种形式。多臂老虎机中的<strong>探索与利用</strong>（exploration vs. exploitation）问题一直以来都是一个特别经典的问题，理解它能够帮助我们学习强化学习。</p><h1 id="2-问题介绍"><a href="#2-问题介绍" class="headerlink" title="2 问题介绍"></a>2 问题介绍</h1><h2 id="2-1定义"><a href="#2-1定义" class="headerlink" title="2.1定义"></a>2.1定义</h2><p>在多臂老虎机（multi-armed bandit，MAB）问题（见图 2-1）中，有一个拥有  根拉杆的老虎机，拉动每一根拉杆都对应一个关于奖励的概率分布 。我们每次拉动其中一根拉杆，就可以从该拉杆对应的奖励概率分布中获得一个奖励 。我们在各根拉杆的奖励概率分布未知的情况下，从头开始尝试，目标是在操作  次拉杆后获得尽可能高的累积奖励。由于奖励的概率分布是未知的，因此我们需要在“探索拉杆的获奖概率”和“根据经验选择获奖最多的拉杆”中进行权衡。“采用怎样的操作策略才能使获得的累积奖励最高”便是多臂老虎机问题。如果是你，会怎么做呢？<br><img src="/./RL-1/RL-11.png"></p><h2 id="2-2形式化描述"><a href="#2-2形式化描述" class="headerlink" title="2.2形式化描述"></a>2.2形式化描述</h2><p>躲避老虎机可以表示为一个元组$&lt;A,R&gt;$,其中：</p><ul><li>A为动作集合，其中一个动作表示拉动一个拉杆。若多臂老虎机一共有K根拉杆，那动作空间就是集合${a_1,\dots,a_k}$，我们用$a_t\in\mathcal{A}$表示任意一个动作；</li><li>R为奖励概率分布，拉动每一根拉杆的动作a都对应一个奖励概率分布$\mathcal{R}(r|a)$，不同拉杆的奖励分布通常是不同的。<br>假设每个时间步只能拉动一个拉杆，多臂老虎机的目标为最大化一段时间步T内累积的奖励:<br>$\max\sum_{t&#x3D;1}^{T}r_{t}, r_{t}\sim\mathcal{R}\left(\cdot|a_{t}\right)$<br>其中$a_t$表示在第时间步拉动某一拉杆的动作，$r_t$表示动作$a_t$获得的奖励。</li></ul><h2 id="2-3累积懊悔"><a href="#2-3累积懊悔" class="headerlink" title="2.3累积懊悔"></a>2.3累积懊悔</h2><p>对于每一个动作a，我们定义其期望奖励为$Q(a)&#x3D;\mathbb{E}<em>{r\sim\mathcal{R}(\cdot|a)} [r]$<br>于是，至少存在一根拉杆，它的期望奖励不小于拉动其他任意一根拉杆，我们将该最优期望奖励表示为$Q^*&#x3D;\max</em>{a\in\mathcal{A}}Q(a)$<br>为了更加直观、方便地观察任意一根拉杆的期望奖励离最优拉杆期望奖励的差距，我们引入<strong>懊悔</strong>（regret）概念。懊悔定义为拉动当前拉杆的动作a与最优拉杆的期望奖励差，即$R(a)&#x3D;Q^*-Q(a)$<br>累积懊悔即操作T次拉杆后累积的懊悔总量，对于一次完整的T步决策${a_1,a_2,\dots,a_T}$,积累懊悔为$\sigma_R&#x3D;\sum_{t&#x3D;1}^TR(a_t)$<br>MAB 问题的目标为最大化累积奖励，等价于最小化累积懊悔。</p><h2 id="2-4估计期望奖励"><a href="#2-4估计期望奖励" class="headerlink" title="2.4估计期望奖励"></a>2.4估计期望奖励</h2><p>为了知道拉动哪一根拉杆能获得更高的奖励，我们需要估计拉动这根拉杆的期望奖励。由于只拉动一次拉杆获得的奖励存在随机性，所以需要多次拉动一根拉杆，然后计算得到的多次奖励的期望，其算法流程如下所示。</p><ul><li>对于$\forall a\in\mathcal{A}$，初始化计数器$N(a)&#x3D;0$和期望奖励估值$\hat{Q}(a)&#x3D;0$</li><li><strong>for</strong> t &#x3D; 1-&gt;T do<ul><li>选取某根拉杆，该动作记为$a_t$</li><li>得到奖励$r_t$ </li><li>更新计数器$N(a_t)&#x3D;N(a_t)+1$: </li><li>更新期望奖励估值：$\hat{Q}(a_t)&#x3D;\hat{Q}(a_t)+\frac{1}{N(a_t)}\Big[r_t-\hat{Q}(a_t)\Big]$</li></ul></li><li><strong>end for</strong><br>以上 for 循环中的第四步如此更新估值，是因为这样可以进行增量式的期望更新，公式如下。<br>$$\begin{aligned}<br>Q_{k}&amp; &#x3D;\frac1k\sum_{i&#x3D;1}^kr_i \<br>&amp;&#x3D;\frac{1}{k}\left(r_k+\sum_{i&#x3D;1}^{k-1}r_i\right) \<br>&amp;&#x3D;\frac1k(r_k+(k-1)Q_{k-1}) \<br>&amp;&#x3D;\frac1k(r_k+kQ_{k-1}-Q_{k-1}) \<br>&amp;&#x3D;Q_{k-1}+\frac1k[r_k-Q_{k-1}]<br>\end{aligned}$$<br>式中，$Q_{k-1}$为k-1个奖励的期望值。<br>以下用python部署一个简单的多臂老虎机。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><br><span class="hljs-comment"># -*- encoding: utf-8 -*-</span><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string"></span><br><span class="hljs-string">@File    :   多臂老虎机.ipynb</span><br><span class="hljs-string"></span><br><span class="hljs-string">@Time    :   2024/08/16 21:30:45</span><br><span class="hljs-string"></span><br><span class="hljs-string">@Author  :   Neutrin</span><br><span class="hljs-string"></span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-comment"># here put the import lib</span><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BernoulliBandit</span>:<br><br>    <span class="hljs-string">&quot;&quot;&quot; 伯努利多臂老虎机,输入K表示拉杆个数 &quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, K</span>):<br><br>        <span class="hljs-variable language_">self</span>.probs = np.random.uniform(size=K)  <span class="hljs-comment"># 随机生成K个0～1的数,作为拉动每根拉杆的获奖</span><br>        <span class="hljs-comment"># 概率</span><br>        <span class="hljs-variable language_">self</span>.best_idx = np.argmax(<span class="hljs-variable language_">self</span>.probs)  <span class="hljs-comment"># 获奖概率最大的拉杆</span><br>        <span class="hljs-variable language_">self</span>.best_prob = <span class="hljs-variable language_">self</span>.probs[<span class="hljs-variable language_">self</span>.best_idx]  <span class="hljs-comment"># 最大的获奖概率</span><br>        <span class="hljs-variable language_">self</span>.K = K<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">step</span>(<span class="hljs-params">self, k</span>):<br><br>        <span class="hljs-comment"># 当玩家选择了k号拉杆后,根据拉动该老虎机的k号拉杆获得奖励的概率返回1（获奖）或0（未</span><br>        <span class="hljs-comment"># 获奖）</span><br>        <span class="hljs-keyword">if</span> np.random.rand() &lt; <span class="hljs-variable language_">self</span>.probs[k]:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br><br>np.random.seed(<span class="hljs-number">1</span>)  <span class="hljs-comment"># 设定随机种子,使实验具有可重复性</span><br>K = <span class="hljs-number">10</span><br>bandit_10_arm = BernoulliBandit(K)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;随机生成了一个%d臂伯努利老虎机&quot;</span> % K)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;获奖概率最大的拉杆为%d号,其获奖概率为%.4f&quot;</span> %<br>      (bandit_10_arm.best_idx, bandit_10_arm.best_prob))<br></code></pre></td></tr></table></figure>接下来我们用一个 Solver 基础类来实现上述的多臂老虎机的求解方案。根据前文的算法流程，我们需要实现下列函数功能：根据策略选择动作、根据动作获取奖励、更新期望奖励估值、更新累积懊悔和计数。在下面的 MAB 算法基本框架中，我们将<strong>根据策略选择动作</strong>、<strong>根据动作获取奖励</strong>和<strong>更新期望奖励估值</strong>放在 <code>run_one_step()</code> 函数中，由每个继承 Solver 类的策略具体实现。而<strong>更新累积懊悔和计数</strong>则直接放在主循环 <code>run()</code> 中。</li></ul><h1 id="3-探索与利用的平衡"><a href="#3-探索与利用的平衡" class="headerlink" title="3 探索与利用的平衡"></a>3 探索与利用的平衡</h1><p>在第2节的算法框架中，还没有一个策略告诉我们应该采取哪个动作，即拉动哪根拉杆，所以接下来我们将学习如何设计一个策略。例如，一个最简单的策略就是一直采取第一个动作，但这就非常依赖运气的好坏。如果运气绝佳，可能拉动的刚好是能获得最大期望奖励的拉杆，即最优拉杆；但如果运气很糟糕，获得的就有可能是最小的期望奖励。在多臂老虎机问题中，一个经典的问题就是探索与利用的平衡问题。<strong>探索</strong>（exploration）是指尝试拉动更多可能的拉杆，这根拉杆不一定会获得最大的奖励，但这种方案能够摸清楚所有拉杆的获奖情况。例如，对于一个 10 臂老虎机，我们要把所有的拉杆都拉动一下才知道哪根拉杆可能获得最大的奖励。<strong>利用</strong>（exploitation）是指拉动已知期望奖励最大的那根拉杆，由于已知的信息仅仅来自有限次的交互观测，所以当前的最优拉杆不一定是全局最优的。例如，对于一个 10 臂老虎机，我们只拉动过其中 3 根拉杆，接下来就一直拉动这 3 根拉杆中期望奖励最大的那根拉杆，但很有可能期望奖励最大的拉杆在剩下的 7 根当中，即使我们对 10 根拉杆各自都尝试了 20 次，发现 5 号拉杆的经验期望奖励是最高的，但仍然存在着微小的概率—另一根 6 号拉杆的真实期望奖励是比 5 号拉杆更高的。<br>于是在多臂老虎机问题中，设计策略时就需要平衡探索和利用的次数，使得累积奖励最大化。一个比较常用的思路是在开始时做比较多的探索，在对每根拉杆都有比较准确的估计后，再进行利用。目前已有一些比较经典的算法来解决这个问题，例如$\epsilon-$贪婪算法、上置信界算法和汤普森采样算法等，我们接下来将分别介绍这几种算法。</p><h1 id="4-epsilon-贪婪算法"><a href="#4-epsilon-贪婪算法" class="headerlink" title="4 $\epsilon-$贪婪算法"></a>4 $\epsilon-$贪婪算法</h1><p>完全贪婪算法即在每一时刻采取期望奖励估值最大的动作（拉动拉杆），这就是纯粹的利用，而没有探索，所以我们通常需要对完全贪婪算法进行一些修改，其中比较经典的一种方法为$\epsilon-$贪婪算法。$\epsilon-$贪婪在完全贪婪算法的基础上加上了噪声，每次以概率$1-\epsilon$选择以往经验中期望奖励估值最大的那根杆(利用),以概率$\epsilon$随机选择一根拉杆(探索)，公式如下：<br>$a_t&#x3D;\begin{cases}\arg\max_{a\in A}\hat{Q}(a),&amp;\text{采样概率:1-}\epsilon\\text{从 }\mathcal{A}\text{中随机选择},&amp;\text{采样概率:}\epsilon\end{cases}$<br>随着探索次数的不断增加，我们对各个动作的奖励估计得越来越准，此时我们就没必要继续花大力气进行探索。 所以$\epsilon-$贪婪算法在具体的实现中，我们可以令$\epsilon$随时间衰减，即探索的概率将会不断降低，但是不会在有限的步数内衰减至0，因为基于有限步数观测的完全贪婪算法仍然是一个局部信息的贪婪算法，永远距离最优解有一个固定的差距。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">EpsilonGreedy</span>(<span class="hljs-title class_ inherited__">Solver</span>):<br>    <span class="hljs-string">&quot;&quot;&quot; epsilon贪婪算法,继承Solver类 &quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, bandit, epsilon=<span class="hljs-number">0.01</span>, init_prob=<span class="hljs-number">1.0</span></span>):<br>        <span class="hljs-built_in">super</span>(EpsilonGreedy, <span class="hljs-variable language_">self</span>).__init__(bandit)<br>        <span class="hljs-variable language_">self</span>.epsilon = epsilon<br>        <span class="hljs-comment">#初始化拉动所有拉杆的期望奖励估值</span><br>        <span class="hljs-variable language_">self</span>.estimates = np.array([init_prob] * <span class="hljs-variable language_">self</span>.bandit.K)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run_one_step</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">if</span> np.random.random() &lt; <span class="hljs-variable language_">self</span>.epsilon:<br>            k = np.random.randint(<span class="hljs-number">0</span>, <span class="hljs-variable language_">self</span>.bandit.K)  <span class="hljs-comment"># 随机选择一根拉杆</span><br>        <span class="hljs-keyword">else</span>:<br>            k = np.argmax(<span class="hljs-variable language_">self</span>.estimates)  <span class="hljs-comment"># 选择期望奖励估值最大的拉杆</span><br>        r = <span class="hljs-variable language_">self</span>.bandit.step(k)  <span class="hljs-comment"># 得到本次动作的奖励</span><br>        <span class="hljs-variable language_">self</span>.estimates[k] += <span class="hljs-number">1.</span> / (<span class="hljs-variable language_">self</span>.counts[k] + <span class="hljs-number">1</span>) * (r - <span class="hljs-variable language_">self</span>.estimates[k])<br>        <span class="hljs-keyword">return</span> k<br>        <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">plot_results</span>(<span class="hljs-params">solvers, solver_names</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;生成累积懊悔随时间变化的图像。输入solvers是一个列表,列表中的每个元素是一种特定的策略。</span><br><span class="hljs-string">    而solver_names也是一个列表,存储每个策略的名称&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> idx, solver <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(solvers):<br>        time_list = <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(solver.regrets))<br>        plt.plot(time_list, solver.regrets, label=solver_names[idx])<br>    plt.xlabel(<span class="hljs-string">&#x27;Time steps&#x27;</span>)<br>    plt.ylabel(<span class="hljs-string">&#x27;Cumulative regrets&#x27;</span>)<br>    plt.title(<span class="hljs-string">&#x27;%d-armed bandit&#x27;</span> % solvers[<span class="hljs-number">0</span>].bandit.K)<br>    plt.legend()<br>    plt.show()<br><br>np.random.seed(<span class="hljs-number">1</span>)<br>epsilon_greedy_solver = EpsilonGreedy(bandit_10_arm, epsilon=<span class="hljs-number">0.01</span>)<br>epsilon_greedy_solver.run(<span class="hljs-number">5000</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;epsilon-贪婪算法的累积懊悔为：&#x27;</span>, epsilon_greedy_solver.regret)<br>plot_results([epsilon_greedy_solver], [<span class="hljs-string">&quot;EpsilonGreedy&quot;</span>])<br></code></pre></td></tr></table></figure><p>结果<br><img src="/./RL-1/RL-12.png"><br>在经历一段时间后，$\epsilon-$贪婪算法的累积懊悔几乎是线性增长的，接下来使用不同的参数值进行部署，</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">np</span>.random.seed(<span class="hljs-number">0</span>)<br><span class="hljs-attribute">epsilons</span> =<span class="hljs-meta"> [1e-4, 0.01, 0.1, 0.25, 0.5]</span><br><span class="hljs-attribute">epsilon_greedy_solver_list</span> =<span class="hljs-meta"> [</span><br><span class="hljs-meta">    EpsilonGreedy(bandit_10_arm, epsilon=e) for e in epsilons</span><br><span class="hljs-meta">]</span><br><span class="hljs-attribute">epsilon_greedy_solver_names</span> =<span class="hljs-meta"> [&quot;epsilon=&#123;&#125;&quot;.format(e) for e in epsilons]</span><br><span class="hljs-attribute">for</span> solver in epsilon_greedy_solver_list:<br>    <span class="hljs-attribute">solver</span>.run(<span class="hljs-number">5000</span>)<br><br><span class="hljs-attribute">plot_results</span>(epsilon_greedy_solver_list, epsilon_greedy_solver_names)<br></code></pre></td></tr></table></figure><p><img src="/./RL-1/RL-13.png"><br>无论取值多少，累积懊悔都是线性增长的，接下来部署随时间衰减的$\epsilon-$贪婪算法，采取具体的形式是反比例，<br>$\epsilon_t&#x3D;\frac{1}{t}$</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">DecayingEpsilonGreedy</span>(<span class="hljs-title class_ inherited__">Solver</span>):<br>    <span class="hljs-string">&quot;&quot;&quot; epsilon值随时间衰减的epsilon-贪婪算法,继承Solver类 &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, bandit, init_prob=<span class="hljs-number">1.0</span></span>):<br>        <span class="hljs-built_in">super</span>(DecayingEpsilonGreedy, <span class="hljs-variable language_">self</span>).__init__(bandit)<br>        <span class="hljs-variable language_">self</span>.estimates = np.array([init_prob] * <span class="hljs-variable language_">self</span>.bandit.K)<br>        <span class="hljs-variable language_">self</span>.total_count = <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run_one_step</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-variable language_">self</span>.total_count += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> np.random.random() &lt; <span class="hljs-number">1</span> / <span class="hljs-variable language_">self</span>.total_count:  <span class="hljs-comment"># epsilon值随时间衰减</span><br>            k = np.random.randint(<span class="hljs-number">0</span>, <span class="hljs-variable language_">self</span>.bandit.K)<br>        <span class="hljs-keyword">else</span>:<br>            k = np.argmax(<span class="hljs-variable language_">self</span>.estimates)<br><br>        r = <span class="hljs-variable language_">self</span>.bandit.step(k)<br>        <span class="hljs-variable language_">self</span>.estimates[k] += <span class="hljs-number">1.</span> / (<span class="hljs-variable language_">self</span>.counts[k] + <span class="hljs-number">1</span>) * (r - <span class="hljs-variable language_">self</span>.estimates[k])<br><br>        <span class="hljs-keyword">return</span> k<br><br><br>np.random.seed(<span class="hljs-number">1</span>)<br>decaying_epsilon_greedy_solver = DecayingEpsilonGreedy(bandit_10_arm)<br>decaying_epsilon_greedy_solver.run(<span class="hljs-number">5000</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;epsilon值衰减的贪婪算法的累积懊悔为：&#x27;</span>, decaying_epsilon_greedy_solver.regret)<br>plot_results([decaying_epsilon_greedy_solver], [<span class="hljs-string">&quot;DecayingEpsilonGreedy&quot;</span>])<br></code></pre></td></tr></table></figure><p><img src="/./RL-1/RL-14.png"><br>随时间做反比例衰减的$\epsilon-$贪婪算法明显优于固定值的$\epsilon-$贪婪算法</p><h1 id="5-上置信界算法"><a href="#5-上置信界算法" class="headerlink" title="5 上置信界算法"></a>5 上置信界算法</h1><p>设想这样一种情况：对于一台双臂老虎机，其中第一根拉杆只被拉动过一次，得到的奖励为0；第二根拉杆被拉动过很多次，我们对它的奖励分布已经有了大致的把握。这时你会怎么做？或许你会进一步尝试拉动第一根拉杆，从而更加确定其奖励分布。这种思路主要是基于不确定性，因为此时第一根拉杆只被拉动过一次，它的不确定性很高。一根拉杆的不确定性越大，它就越具有探索的价值，因为探索之后我们可能发现它的期望奖励很大。我们在此引入不确定性度量U(a)，它会随着一个动作被尝试次数的增加而减小。我们可以使用一种基于不确定性的策略来综合考虑现有的期望奖励估值和不确定性，其核心问题是如何估计不确定性。<br><strong>上置信界</strong>（upper confidence bound，UCB）算法是一种经典的基于不确定性的策略算法，它的思想用到了一个非常著名的数学原理：<strong>霍夫丁不等式</strong>（Hoeffding’s inequality）。在霍夫丁不等式中，令$X_1,\ldots,X_n$为n个独立同分布的随机变量，取值范围为[0，1]其经验期望为$\bar{x}<em>{n}&#x3D;\frac{1}{n}\sum</em>{j&#x3D;1}^{n}X_{j}$，则有：<br>$\mathbb{P}\left{\mathbb{E}\left[X\right]\geq\bar{x}_n+u\right}\leq e^{-2nu^2}$<br>现在我们将霍夫丁不等式运用于多臂老虎机问题中。<br>过于复杂，原理不做赘述，感兴趣的请自行搜索。</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">UCB</span>(<span class="hljs-title class_ inherited__">Solver</span>):<br>    <span class="hljs-string">&quot;&quot;&quot; UCB算法,继承Solver类 &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, bandit, coef, init_prob=<span class="hljs-number">1.0</span></span>):<br>        <span class="hljs-built_in">super</span>(UCB, <span class="hljs-variable language_">self</span>).__init__(bandit)<br>        <span class="hljs-variable language_">self</span>.total_count = <span class="hljs-number">0</span><br>        <span class="hljs-variable language_">self</span>.estimates = np.array([init_prob] * <span class="hljs-variable language_">self</span>.bandit.K)<br>        <span class="hljs-variable language_">self</span>.coef = coef<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run_one_step</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-variable language_">self</span>.total_count += <span class="hljs-number">1</span><br>        ucb = <span class="hljs-variable language_">self</span>.estimates + <span class="hljs-variable language_">self</span>.coef * np.sqrt(<br>            np.log(<span class="hljs-variable language_">self</span>.total_count) / (<span class="hljs-number">2</span> * (<span class="hljs-variable language_">self</span>.counts + <span class="hljs-number">1</span>)))  <span class="hljs-comment"># 计算上置信界</span><br>        k = np.argmax(ucb)  <span class="hljs-comment"># 选出上置信界最大的拉杆</span><br>        r = <span class="hljs-variable language_">self</span>.bandit.step(k)<br>        <span class="hljs-variable language_">self</span>.estimates[k] += <span class="hljs-number">1.</span> / (<span class="hljs-variable language_">self</span>.counts[k] + <span class="hljs-number">1</span>) * (r - <span class="hljs-variable language_">self</span>.estimates[k])<br>        <span class="hljs-keyword">return</span> k<br><br><br>np.random.seed(<span class="hljs-number">1</span>)<br>coef = <span class="hljs-number">1</span>  <span class="hljs-comment"># 控制不确定性比重的系数</span><br>UCB_solver = UCB(bandit_10_arm, coef)<br>UCB_solver.run(<span class="hljs-number">5000</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;上置信界算法的累积懊悔为：&#x27;</span>, UCB_solver.regret)<br>plot_results([UCB_solver], [<span class="hljs-string">&quot;UCB&quot;</span>])<br></code></pre></td></tr></table></figure><p><img src="/./RL-1/RL-15.png"></p><h1 id="6-汤普森采样法"><a href="#6-汤普森采样法" class="headerlink" title="6 汤普森采样法"></a>6 汤普森采样法</h1><p>MAB 中还有一种经典算法——<strong>汤普森采样</strong>（Thompson sampling），先假设拉动每根拉杆的奖励服从一个特定的概率分布，然后根据拉动每根拉杆的期望奖励来进行选择。但是由于计算所有拉杆的期望奖励的代价比较高，汤普森采样算法使用采样的方式，即根据当前每个动作a的奖励概率分布进行一轮采样，得到一组各根拉杆的奖励样本，再选择样本中奖励最大的动作。可以看出，汤普森采样是一种计算所有拉杆的最高奖励概率的蒙特卡洛采样方法。<br>了解了汤普森采样算法的基本思路后，我们需要解决另一个问题：怎样得到当前每个动作a的奖励概率分布并且在过程中进行更新？在实际情况中，我们通常用 Beta 分布对当前每个动作的奖励概率分布进行建模。具体来说，若某拉杆被选择了k次，其中$m_1$次奖励为1， $m_2$次奖励为0，则该拉杆的奖励服从参数为 的 Beta分布。下图是汤普森采样的一个示例。<br><img src="/./RL-1/RL-16.png"></p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ThompsonSampling</span>(<span class="hljs-title class_ inherited__">Solver</span>):<br>    <span class="hljs-string">&quot;&quot;&quot; 汤普森采样算法,继承Solver类 &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, bandit</span>):<br>        <span class="hljs-built_in">super</span>(ThompsonSampling, <span class="hljs-variable language_">self</span>).__init__(bandit)<br>        <span class="hljs-variable language_">self</span>._a = np.ones(<span class="hljs-variable language_">self</span>.bandit.K)  <span class="hljs-comment"># 列表,表示每根拉杆奖励为1的次数</span><br>        <span class="hljs-variable language_">self</span>._b = np.ones(<span class="hljs-variable language_">self</span>.bandit.K)  <span class="hljs-comment"># 列表,表示每根拉杆奖励为0的次数</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run_one_step</span>(<span class="hljs-params">self</span>):<br>        samples = np.random.beta(<span class="hljs-variable language_">self</span>._a, <span class="hljs-variable language_">self</span>._b)  <span class="hljs-comment"># 按照Beta分布采样一组奖励样本</span><br>        k = np.argmax(samples)  <span class="hljs-comment"># 选出采样奖励最大的拉杆</span><br>        r = <span class="hljs-variable language_">self</span>.bandit.step(k)<br><br>        <span class="hljs-variable language_">self</span>._a[k] += r  <span class="hljs-comment"># 更新Beta分布的第一个参数</span><br>        <span class="hljs-variable language_">self</span>._b[k] += (<span class="hljs-number">1</span> - r)  <span class="hljs-comment"># 更新Beta分布的第二个参数</span><br>        <span class="hljs-keyword">return</span> k<br><br><br>np.random.seed(<span class="hljs-number">1</span>)<br>thompson_sampling_solver = ThompsonSampling(bandit_10_arm)<br>thompson_sampling_solver.run(<span class="hljs-number">5000</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;汤普森采样算法的累积懊悔为：&#x27;</span>, thompson_sampling_solver.regret)<br>plot_results([thompson_sampling_solver], [<span class="hljs-string">&quot;ThompsonSampling&quot;</span>])<br></code></pre></td></tr></table></figure><p><img src="/./RL-1/RL-17.png"><br>$\epsilon-$贪婪算法是线性增长的，其余都是次线性增长。</p><h1 id="7-总结与心得"><a href="#7-总结与心得" class="headerlink" title="7 总结与心得"></a>7 总结与心得</h1><p>本文着重与探索与利用两个环节，与环境进行交互，获得累积奖励与懊悔，这是强化学习是错法中的必备技术，多臂老虎机问题正是研究探索与利用的最佳环境。<br>$\epsilon-$贪婪算法等几种方法在多臂老虎机中非常常见，上置信界算法和汤普森采样方法均能保证对数的渐进最优累积懊悔。<br>多臂老虎机问题与强化学习的一大区别在于其与环境的交互并不会改变环境，即多臂老虎机的每次交互的结果和以往的动作无关，所以可看作<strong>无状态的强化学习</strong>（stateless reinforcement learning）。</p>]]></content>
    
    
    <categories>
      
      <category>强化学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>仿真</tag>
      
      <tag>强化学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RL-0</title>
    <link href="/2024/08/16/RL-0/"/>
    <url>/2024/08/16/RL-0/</url>
    
    <content type="html"><![CDATA[<h1 id="1-什么是强化学习？"><a href="#1-什么是强化学习？" class="headerlink" title="1 什么是强化学习？"></a>1 什么是强化学习？</h1><p>广泛地讲，强化学习是机器通过与环境交互来实现目标的一种计算方法。机器和环境的一轮交互是指，机器在环境的一个状态下做一个动作决策，把这个动作作用到环境当中，这个环境发生相应的改变并且将相应的奖励反馈和下一轮状态传回机器。这种交互是迭代进行的，机器的目标是最大化在多轮交互过程中获得的累积奖励的期望。强化学习用智能体（agent）这个概念来表示做决策的机器。相比于有监督学习中的“模型”，强化学习中的“智能体”强调机器不但可以感知周围的环境信息，还可以通过做决策来直接改变这个环境，而不只是给出一些预测信号。<br>智能体和环境之间具体的交互方式如下图所示。在每一轮交互中，智能体感知到环境目前所处的状态，经过自身的计算给出本轮的动作，将其作用到环境中；环境得到智能体的动作后，产生相应的即时奖励信号并发生相应的状态转移。智能体则在下一轮交互中感知到新的环境状态，依次类推。</p><p><img src="/./RL-0/RL-01.png"></p><p>这里，智能体有3种关键要素，即感知、决策和奖励。</p><ul><li>感知。智能体在某种程度上感知环境的状态，从而知道自己所处的现状。例如，下围棋的智能体感知当前的棋盘情况；无人车感知周围道路的车辆、行人和红绿灯等情况；机器狗通过摄像头感知面前的图像，通过脚底的力学传感器来感知地面的摩擦功率和倾斜度等情况。</li><li>智能体根据当前的状态计算出达到目标需要采取的动作的过程叫作决策。例如，针对当前的棋盘决定下一颗落子的位置；针对当前的路况，无人车计算出方向盘的角度和刹车、油门的力度；针对当前收集到的视觉和力觉信号，机器狗给出4条腿的齿轮的角速度。策略是智能体最终体现出的智能形式，是不同智能体之间的核心区别。</li><li>奖励。环境根据状态和智能体采取的动作，产生一个标量信号作为奖励反馈。这个标量信号衡量智能体这一轮动作的好坏。例如，围棋博弈是否胜利；无人车是否安全、平稳且快速地行驶；机器狗是否在前进而没有摔倒。最大化累积奖励期望是智能体提升策略的目标，也是衡量智能体策略好坏的关键指标。<br>从以上分析可以看出，面向决策任务的强化学习和面向预测任务的有监督学习在形式上是有不少区别的。首先，决策任务往往涉及多轮交互，即序贯决策；而预测任务总是单轮的独立任务。如果决策也是单轮的，那么它可以转化为“判别最优动作”的预测任务。其次，因为决策任务是多轮的，智能体就需要在每轮做决策时考虑未来环境相应的改变，所以当前轮带来最大奖励反馈的动作，在长期来看并不一定是最优的。</li></ul><h1 id="2-强化学习的环境"><a href="#2-强化学习的环境" class="headerlink" title="2 强化学习的环境"></a>2 强化学习的环境</h1><p>强化学习的智能体是在和一个动态环境的交互中完成序贯决策的。我们说一个环境是动态的，意思就是它会随着某些因素的变化而不断演变，这在数学和物理中往往用随机过程来刻画。其实，生活中几乎所有的系统都在进行演变，例如一座城市的交通、一片湖中的生态、一场足球比赛、一个星系等。对于一个随机过程，其最关键的要素就是状态以及状态转移的条件概率分布。这就好比一个微粒在水中的布朗运动可以由它的起始位置以及下一刻的位置相对当前位置的条件概率分布来刻画。<br>如果在环境这样一个自身演变的随机过程中加入一个外来的干扰因素，即智能体的动作，那么环境的下一刻状态的概率分布将由当前状态和智能体的动作来共同决定，用最简单的数学公式表示则是<br>$下一状态~P(·|当前状态，智能体的动作)$<br>根据上式可知，智能体决策的动作作用到环境中，使得环境发生相应的状态改变，而智能体接下来则需要在新的状态下进一步给出决策。<br>由此我们看到，与面向决策任务的智能体进行交互的环境是一个动态的随机过程，其未来状态的分布由当前状态和智能体决策的动作来共同决定，并且每一轮状态转移都伴随着两方面的随机性：一是智能体决策的动作的随机性，二是环境基于当前状态和智能体动作来采样下一刻状态的随机性。通过对环境的动态随机过程的刻画，我们能清楚地感受到，在动态随机过程中学习和在一个固定的数据分布下学习是非常不同的。</p><h1 id="3-强化学习的目标"><a href="#3-强化学习的目标" class="headerlink" title="3 强化学习的目标"></a>3 强化学习的目标</h1><p>在上述动态环境下，智能体和环境每次进行交互时，环境会产生相应的奖励信号，其往往由实数标量来表示。这个奖励信号一般是诠释当前状态或动作的好坏的及时反馈信号，好比在玩游戏的过程中某一个操作获得的分数值。整个交互过程的每一轮获得的奖励信号可以进行累加，形成智能体的整体回报（return），好比一盘游戏最后的分数值。根据环境的动态性我们可以知道，即使环境和智能体策略不变，智能体的初始状态也不变，智能体和环境交互产生的结果也很可能是不同的，对应获得的回报也会不同。因此，在强化学习中，我们关注回报的期望，并将其定义为价值（value），这就是强化学习中智能体学习的优化目标。<br>价值的计算有些复杂，因为需要对交互过程中每一轮智能体采取动作的概率分布和环境相应的状态转移的概率分布做积分运算。强化学习和有监督学习的学习目标其实是一致的，即在某个数据分布下优化一个分数值的期望。不过，经过后面的分析我们会发现，强化学习和有监督学习的优化途径是不同的。</p><h1 id="4-强化学习中的数据"><a href="#4-强化学习中的数据" class="headerlink" title="4 强化学习中的数据"></a>4 强化学习中的数据</h1><p>接下来我们从数据层面谈谈有监督学习和强化学习的区别。<br>有监督学习的任务建立在从给定的数据分布中采样得到的训练数据集上，通过优化在训练数据集中设定的目标函数（如最小化预测误差）来找到模型的最优参数。这里，训练数据集背后的数据分布是完全不变的。<br>在强化学习中，数据是在智能体与环境交互的过程中得到的。如果智能体不采取某个决策动作，那么该动作对应的数据就永远无法被观测到，所以当前智能体的训练数据来自之前智能体的决策结果。因此，智能体的策略不同，与环境交互所产生的数据分布就不同，如下图所示。<br><img src="/./RL-0/RL-02.png"><br>具体而言，强化学习中有一个关于数据分布的概念，叫作占用度量（occupancy measure），其具体的数学定义和性质会在第3章讨论，在这里我们只做简要的陈述：归一化的占用度量用于衡量在一个智能体决策与一个动态环境的交互过程中，采样到一个具体的状态动作对（state-action pair)的概率分布。<br>占用度量有一个很重要的性质：给定两个策略及其与一个动态环境交互得到的两个占用度量，那么当且仅当这两个占用度量相同时，这两个策略相同。也就是说，如果一个智能体的策略有所改变，那么它和环境交互得到的占用度量也会相应改变。<br>根据占用度量这一重要的性质，我们可以领悟到强化学习本质的思维方式。</p><ul><li>强化学习的策略在训练中会不断更新，其对应的数据分布（即占用度量）也会相应地改变。因此，强化学习的一大难点就在于，智能体看到的数据分布是随着智能体的学习而不断发生改变的。</li><li>由于奖励建立在状态动作对之上，一个策略对应的价值其实就是一个占用度量下对应的奖励的期望，因此寻找最优策略对应着寻找最优占用度量。</li></ul><h1 id="5-强化学习的独特性"><a href="#5-强化学习的独特性" class="headerlink" title="5 强化学习的独特性"></a>5 强化学习的独特性</h1><p>通过前面5节的讲解，读者现在应该已经对强化学习的基本数学概念有了一定的了解。这里我们回过头来再看看一般的有监督学习和强化学习的区别。<br>对于一般的有监督学习任务，我们的目标是找到一个最优的模型函数，使其在训练数据集上最小化一个给定的损失函数。在训练数据独立同分布的假设下，这个优化目标表示最小化模型在整个数据分布上的泛化误差（generalization error），用简要的公式可以概括为：<br>最优模型$&#x3D;\arg\min_\text{模型}\mathbb{E}_($特征，标签$)\sim$数据分布[损失函数(标签，模型(特征))]<br>相比之下，强化学习任务的最终优化目标是最大化智能体策略在和动态环境交互过程中的价值。根据第4节的分析，策略的价值可以等价转换成奖励函数在策略的占用度量上的期望，即：</p><p>$\text{最优策略}&#x3D;\arg\max_\text{策略}\mathbb{E}_{(\text{状态,动作})\sim\text{策略的占用度里}}[\text{奖励函数}(\text{状态,动作})]$</p><p>观察以上两个优化公式，我们可以回顾第3节，总结出两者的相似点和不同点。</p><ul><li>有监督学习和强化学习的优化目标相似，即都是在优化某个数据分布下的一个分数值的期望。</li><li>二者优化的途径是不同的，有监督学习直接通过优化模型对于数据特征的输出来优化目标，即修改目标函数而数据分布不变；强化学习则通过改变策略来调整智能体和环境交互数据的分布，进而优化目标，即修改数据分布而目标函数不变。<br>综上所述，一般有监督学习和强化学习的范式之间的区别为：</li><li>一般的有监督学习关注寻找一个模型，使其在给定数据分布下得到的损失函数的期望最小；</li><li>强化学习关注寻找一个智能体策略，使其在与动态环境交互的过程中产生最优的数据分布，即最大化该分布下一个给定奖励函数的期望。</li></ul>]]></content>
    
    
    <categories>
      
      <category>强化学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>仿真</tag>
      
      <tag>强化学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Lineargression</title>
    <link href="/2024/08/16/Lineargression/"/>
    <url>/2024/08/16/Lineargression/</url>
    
    <content type="html"><![CDATA[<h1 id="1-基本形式"><a href="#1-基本形式" class="headerlink" title="1 基本形式"></a>1 基本形式</h1><p>线性模型尝试用一个多个属性的线性组合来进行预测：<br>$f(\boldsymbol{x})&#x3D;w_1x_1+w_2x_2+\ldots+w_dx_d+b$<br>写成：<br>$f(\boldsymbol{x})&#x3D;\boldsymbol{w}^\mathrm{T}\boldsymbol{x}+b$<br>模型的确定取决于$w,b$是否被确定.</p><h1 id="2-线性回归"><a href="#2-线性回归" class="headerlink" title="2 线性回归"></a>2 线性回归</h1><h2 id="2-1单输入"><a href="#2-1单输入" class="headerlink" title="2.1单输入"></a>2.1单输入</h2><p>线性回归要求预测值尽可能的接近真实值.<br>对于离散属性，若输入在时域具有先后关系，可以将其进行编码，转化为连续值：<br>将$n$个属性使用$n$维向量进行热编码，例：“高，中，低”可编码为“(100),(010),(001)”<br>线性回归期望获得如下：<br>$f(x_i)&#x3D;wx_i+b,  f(x_i)\simeq y_i$<br>正如第1节所说，确定$w,b$就能得到预测值；确定它们的关键在于度量预测值与真实值之间的差距.<br>在这里，我们尝试用均方误差(MSE)来对其进行度量，即：<br>$(w^*,b^*)&#x3D;\arg\min_{(w,b)}\sum_{i&#x3D;1}^m\left(f\left(x_i\right)-y_i\right)^2$<br>基于均方误差来进行模型求解的方法称为“最小二乘法”，它意味着找到一条直线，使样本到直线上的欧式距离之和最小.<br>求解出最小值的过程称为模型的最小二乘“参数估计”.对上式求偏导：<br>$\frac{\partial E_{(w,b)}}{\partial w}&#x3D;2\left(w\sum_{i&#x3D;1}^mx_i^2-\sum_{i&#x3D;1}^m\left(y_i-b\right)x_i\right)$<br>$\frac{\partial E_{(w,b)}}{\partial b}&#x3D;2\left(mb-\sum_{i&#x3D;1}^m\left(y_i-wx_i\right)\right)$<br>令偏导为0可得$w,b$最优解的闭式解：<br>$w&#x3D;\frac{\sum_{i&#x3D;1}^my_i(x_i-\bar{x})}{\sum_{i&#x3D;1}^mx_i^2-\frac1m\left(\sum_{i&#x3D;1}^mx_i\right)^2}$<br>$b&#x3D;\frac1m\sum_{i&#x3D;1}^m(y_i-wx_i)$</p><h2 id="2-2多输入"><a href="#2-2多输入" class="headerlink" title="2.2多输入"></a>2.2多输入</h2><p>更一般的情形是，输入样本由多个属性.<br>此时期望获得：<br>$f(x_i)&#x3D;w^{T}x_i+b,  f(x_i)\simeq y_i$<br>称多元线性回归.<br>同样的，利用最小二乘法对参数进行估计.<br>将x扩充为</p><p>$\mathbf{X}&#x3D;\begin{pmatrix}x_{11}&amp;x_{12}&amp;\ldots&amp;x_{1d}&amp;1\x_{21}&amp;x_{22}&amp;\ldots&amp;x_{2d}&amp;1\\vdots&amp;\vdots&amp;\ddots&amp;\vdots&amp;\vdots\x_{m1}&amp;x_{m2}&amp;\ldots&amp;x_{md}&amp;1\end{pmatrix}&#x3D;\begin{pmatrix}\boldsymbol{x}_1^\mathrm{T}&amp;1\\boldsymbol{x}_2^\mathrm{T}&amp;1\\vdots&amp;\vdots\\boldsymbol{x}_m^\mathrm{T}&amp;1\end{pmatrix}$</p><p>将输入写成向量形式，则对于$w$,有：<br>$\hat{\boldsymbol{w}}^{*}&#x3D;\arg\min_{\hat{\boldsymbol{w}}}\left(\boldsymbol{y}-\mathbf{X}\hat{\boldsymbol{w}}\right)^{\mathrm{T}}\left(\boldsymbol{y}-\mathbf{X}\hat{\boldsymbol{w}}\right)$<br>求偏导得：<br>$\frac{\partial E_{\hat{\boldsymbol{w}}}}{\partial\hat{\boldsymbol{w}}}&#x3D;2 \mathbf{X}^{\mathrm{T}}\left(\mathbf{X}\hat{\boldsymbol{w}}-\boldsymbol{y}\right)$<br>令上式为0即可得到.</p><p>线性函数虽然简单，但变化丰富，我们可以让预测函数与一个可微调函数$g(·)$相乘，使其可以拟合更多类型的数值：<br>$y&#x3D;g^{-1}(w^Tx+b)$<br>上述模型称广义线性模型，</p><h1 id="3-对数几率回归"><a href="#3-对数几率回归" class="headerlink" title="3 对数几率回归"></a>3 对数几率回归</h1><p>对于二分类任务，将得到的预测值转为0&#x2F;1值，最理想的是“单位阶跃函数”，但是它不连续，不能作为可微调函数.作为替代，使用：<br>$y&#x3D;\frac{1}{1+e^{-z}}$<br>若令z等于$(w^Tx+b)$,再进行变化，得：<br>$ln\frac{y}{1-y}&#x3D;(w^Tx+b)$<br>y和1-y分别是正例和反例的可能性.<br>实际上是使用线性回归模型去逼近真实标记的对数几率.</p><h1 id="4-代码"><a href="#4-代码" class="headerlink" title="4 代码"></a>4 代码</h1><p>(基于sklearn库)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><br><span class="hljs-comment"># -*- encoding: utf-8 -*-</span><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string"></span><br><span class="hljs-string">@File    :   linear regression.ipynb</span><br><span class="hljs-string"></span><br><span class="hljs-string">@Time    :   2024/08/15 15:59:55</span><br><span class="hljs-string"></span><br><span class="hljs-string">@Author  :   Neutrin</span><br><span class="hljs-string"></span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-comment">#this is a simple of linear regression models</span><br><span class="hljs-comment"># here put the import lib</span><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">from</span> sklearn.linear_model <span class="hljs-keyword">import</span> LogisticRegression<br><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> train_test_split<br><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> confusion_matrix, ConfusionMatrixDisplay<br><br><span class="hljs-comment">#读取数据</span><br>data = pd.read_csv(<span class="hljs-string">&#x27;watermelon3_0_Ch.csv&#x27;</span>)<br><br><span class="hljs-comment">#热编码</span><br>data = pd.get_dummies(data)<br><span class="hljs-built_in">print</span>(data.shape)<br><br><span class="hljs-comment">#划分数据集</span><br><br>x_train, x_test, y_train, y_test = train_test_split(data.iloc[:,<span class="hljs-number">0</span>:<span class="hljs-number">20</span>],data.iloc[:,<span class="hljs-number">21</span>],test_size=<span class="hljs-number">0.2</span>, random_state=<span class="hljs-number">0</span>)<br><br><span class="hljs-comment">#建立模型</span><br>model = LogisticRegression(max_iter=<span class="hljs-number">1000</span>)<br>model.fit(x_train, y_train)<br><br><span class="hljs-comment">#预测</span><br>y_pred = model.predict(x_test)<br><br><span class="hljs-comment">#评估</span><br>score = model.score(x_test, y_test)<br><span class="hljs-built_in">print</span>(score)<br>cm = confusion_matrix(y_test, y_pred)<br><br><span class="hljs-comment"># 归一化混淆矩阵</span><br><br>cm_normalized = cm.astype(<span class="hljs-string">&#x27;float&#x27;</span>) / cm.<span class="hljs-built_in">sum</span>(axis=<span class="hljs-number">1</span>)[:, np.newaxis]<br><br><span class="hljs-comment"># 绘制归一化混淆矩阵</span><br><br>disp = ConfusionMatrixDisplay(confusion_matrix=cm_normalized, display_labels=model.classes_)<br><br>disp.plot(cmap=plt.cm.Blues)<br><span class="hljs-comment"># 显示图像</span><br>plt.title(<span class="hljs-string">&#x27;Normalized Confusion Matrix&#x27;</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><p>结果如图所示：<br><img src="D:\Postgraduate\MyBlog\hexo-blog\source_posts\Lineargression\LR.png" alt="LR"></p>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>机器学习</tag>
      
      <tag>仿真</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
